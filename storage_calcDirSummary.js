/*
 * This program calculate the total file size of each directory specified in a given data file.
 * 
 * It is assumed that the data file is generated by using following command.
 * <pre>
 * $ find ./ -printf "%y\t%s\t%p\n" 
 * d       4096    ./
 * d       20480   ./node_modules
 * d       4096    ./node_modules/just-debounce
 * f       1491    ./node_modules/just-debounce/package.json
 * f       1079    ./node_modules/just-debounce/LICENSE
 * ... rest omitted ...
 * </pre>
 * 
 */


const fs       = require("fs");
const readline = require("readline");
const sprintf  = require("sprintf-js").sprintf;

class Summarizer {

	constructor() {
		this.results = {};
		this.regexList = [];
	}
	

	/** Calculate total file size for a given directory pattern.
	 *
	 * @param {string} fname - A data file name.
	 * @param {RegExp} regex - A regular expression object. 
	 */

	parse(fname) {

		const rl = readline.createInterface({
			input: fs.createReadStream(fname),
			output: process.stdout,
			terminal: false
		});

		rl.on('line', (line) => {
			for (let i=0; i<this.regexList.length; i++) {
				this.matchAndSort(line, this.regexList[i]);
			}
		});
		

		rl.on('close', (line) => {
			// show the this.results.
			for (let r0 of this.regexList) {
				let r = r0.toString();
				//console.log(r);
				console.log(sprintf("%s\t%.3e", r, this.results[r] / 1000000000)); // GB
			}
			//console.log(this.results);
		});
		
	}

	
	matchAndSort(line, regex) {
		let m = regex.exec(line);
		if (m != undefined) {
			let cols = line.split("\t");
			let key  = regex.toString();
			if (this.results[key] == undefined) {
				this.results[key] = 0;
			}
			this.results[key] += parseInt(cols[1]);
		}
	}
	

	readRegexFile(rfname) {
		this.regexList
			= fs.readFileSync(rfname, "UTF-8")
			.split(/\n/)
			.map((r)=>{return new RegExp(r);});
		
	}


}

// ---

function main() {
	let fname = process.argv[2];
	let rfname = process.argv[3];
	//let regex = new RegExp(process.argv[3]);

	const summarizer = new Summarizer();
	summarizer.readRegexFile(rfname);
	summarizer.parse(fname);
	console.log("The results are as follows");
}

main();
